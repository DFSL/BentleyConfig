%YAML 1.2
---
name: BentleyConfig
file_extensions: [cfg,ucf,pcf]
scope: source.bentleyconfig

contexts:
  prototype:
    - include: comments

  main:
    - include: assignmentStatement
    - include: conditionals
    - include: directives
    - include: functions

  directives:
    - match: '(%lock|%undef)'
      scope: variable.function.bentleyconfig
      push:
        - meta_content_scope: variable.other.readwrite.bentleyconfig
        - match: \n
          pop: true
    - match: '%include'
      scope: variable.function.bentleyconfig
      push:
        - meta_content_scope: string.unquoted
        - include: variableEvaluation
        - match: \n
          pop: true

  variableEvaluation:
    - match: '\$(\(|\{)'
      scope: variable.function.bentleyconfig
      push:
        - meta_content_scope: variable.other.readwrite.bentleyconfig
        - match: '(\)|\})'
          scope: variable.function.bentleyconfig
          pop: true

  assignmentStatement:
    - match: '^\s*(\w+)\b\s*(=|:|<|>|\+)\s*'
      captures:
        1: variable.other.readwrite.bentleyconfig
        2: keyword.operator.bentleyconfig
      push: 
        - meta_content_scope: string.unquoted
        - include: variableEvaluation
        - match: (#|\n) 
          pop: true

  conditionals:
    - match: '(%if||%elif|%else|%endif)\b'
      scope: keyword.control.conditional
    - match: '(%ifdef|%ifndef)\b'
      scope: keyword.control.conditional
      push:
        - meta_content_scope: variable.other.readwrite.bentleyconfig
        - match: \n
          pop: true

  functions:
    - match: 'defined\s*\('
      scope: variable.function.bentleyconfig
      push:
        - meta_content_scope: variable.other.readwrite.bentleyconfig
        - match: '\)'
          scope: variable.function.bentleyconfig
          pop: true
    - match: 'exists\s*\('
      scope: variable.function.bentleyconfig
      push:
        - include: variableEvaluation
        - meta_content_scope: string.unquoted
        - match: '\)'
          scope: variable.function.bentleyconfig
          pop: true

  comments:
    - match: '#.*'
      scope: comment.line.bentleyconfig
